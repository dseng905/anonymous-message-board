{"version":3,"sources":["components/Reply.jsx","components/Thread.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Reply","props","useState","deletePassword","setDeletePassword","isReported","setReported","e","a","preventDefault","target","reset","request","board","fetch","method","headers","body","JSON","stringify","thread_id","reply_id","delete_password","res","text","replyCountAdjust","className","Date","createdOn","toUTCString","onSubmit","onChange","value","placeholder","type","onClick","Thread","replyText","setReplyText","replyPassword","setReplyPassword","replies","setReplies","replyCount","setReplyCount","deleteCount","setDeleteReplyCount","_id","threadCountAdjust","handleDeleteCount","action","useEffect","json","data","console","log","length","fetchReplies","bumpedOn","map","reply","key","created_on","Board","threadList","setThreadList","threadCount","setThreadCount","isDeleted","setifThreadDeleted","threadCreated","setifThreadCreated","newThreadText","setNewThreadText","newThreadPassword","setNewThreadPassword","useParams","adjustThreadCount","boardURL","threads","forEach","obj","push","fetchThreads","thread","bumped_on","App","boardQuery","setBoardQuery","boardList","setBoardList","list","fetchBoards","exact","path","to","class","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5bd0801.chunk.js","sourcesContent":["import React , {useState} from'react'\r\n\r\nconst Reply = (props) => {\r\n  const [deletePassword, setDeletePassword] = useState(\"\");\r\n  const [isReported, setReported] = useState(false);\r\n\r\n  async function deleteReply(e) {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/replies/\" + props.board + \"?_method=DELETE\";\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        thread_id : props.thread_id,\r\n        reply_id : props.reply_id,\r\n        delete_password : deletePassword,\r\n      })\r\n    })\r\n    const status = await res.text();\r\n\r\n    if(status === 'success') {\r\n      props.replyCountAdjust('DELETE')\r\n    }\r\n\r\n  }\r\n\r\n  async function reportReply(e) {\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/replies/\" + props.board + \"?_method=PUT\";\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        thread_id : props.thread_id,\r\n        reply_id : props.reply_id,\r\n      })\r\n    })\r\n\r\n    setReported(true);\r\n  }\r\n\r\n  function handleDeletePassword(e) {\r\n    setDeletePassword(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"reply-container\">\r\n      <p className=\"reply-created-on\">{(new Date(props.createdOn)).toUTCString()}</p>\r\n      <p>{props.text}</p>\r\n      <form className=\"reply-delete-form\" onSubmit={deleteReply}>\r\n        <input onChange={handleDeletePassword} placeholder=\"Enter password to delete...\" type=\"password\" />\r\n        <button type=\"submit\">Delete</button>\r\n      </form>\r\n      <button onClick={reportReply}>Report</button>\r\n      {isReported ? (<p>Reply has been reported!</p>) : (<div></div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Reply\r\n","import React, {useState, useEffect} from 'react';\r\nimport Reply from './Reply';\r\n\r\nconst Thread = (props) => {\r\n  const [deletePassword, setDeletePassword] = useState(\"\");\r\n  const [replyText, setReplyText] = useState(\"\");\r\n  const [replyPassword, setReplyPassword] = useState(\"\");\r\n  const [replies, setReplies] = useState([]);\r\n  const [replyCount, setReplyCount] = useState(0);\r\n  const [deleteCount, setDeleteReplyCount] = useState(0);\r\n  const [isReported, setReported] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchReplies() {\r\n      const serverURL = \"\";\r\n      const request = serverURL + \"/api/replies/\" + props.board + \"?thread_id=\" + props._id;\r\n      const res = await fetch(request);\r\n      const data = await res.json();\r\n      console.log(data);\r\n      setReplies(data.replies);\r\n      setReplyCount(data.replies.length);\r\n    }\r\n\r\n    fetchReplies();\r\n  }, [replyCount, deleteCount])\r\n\r\n  async function createReply(e) {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/replies/\" + props.board;\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        text : replyText,\r\n        delete_password : replyPassword,\r\n        thread_id : props._id\r\n      })\r\n    })\r\n    const status = await res.text();\r\n    if(status === 'success') {\r\n      setReplyCount(replyCount+1);\r\n    }  \r\n  }\r\n\r\n  async function deleteThread(e) {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/threads/\" + props.board + \"?_method=DELETE\";\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        thread_id : props._id,\r\n        delete_password : deletePassword,\r\n      })\r\n    })\r\n\r\n    //Check status to see if we need to rerender\r\n    const status = await res.text();\r\n    if(status === \"success\") {\r\n      props.threadCountAdjust(\"DELETE\");\r\n    }\r\n  }\r\n\r\n  async function reportThread() {\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/threads/\" + props.board + \"?_method=PUT\";\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        thread_id : props._id,\r\n      })\r\n    })\r\n    setReported(true);\r\n  }\r\n\r\n  function handleDeleteCount(action) {\r\n    if(action === 'DELETE') {\r\n      setDeleteReplyCount(deleteCount + 1);\r\n    }\r\n  }\r\n\r\n  function handlePassword(e) {\r\n    setDeletePassword(e.target.value);\r\n  }\r\n\r\n  function handleReplyText(e) {\r\n    setReplyText(e.target.value);\r\n  }\r\n\r\n  function handleReplyPassword(e) {\r\n    setReplyPassword(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className='thread-container'>\r\n      <p className=\"thread-created-on\">{(new Date(props.createdOn)).toUTCString()}</p>\r\n      <p className=\"thread-bumped-on\">Last Reply: {(new Date(props.bumpedOn)).toUTCString()} </p>\r\n      <p className=\"thread-text\">{props.text}</p>\r\n\r\n      <div className=\"thread-controls\">\r\n        <form className=\"thread-delete-form\" onSubmit={deleteThread}>\r\n          <input className=\"thread-delete-password\" placeholder=\"Enter password to delete...\" type=\"password\" onChange={handlePassword} />\r\n          <button className=\"thread-delete-button\" type=\"submit\">Delete</button>\r\n        </form>\r\n        <button onClick={reportThread} className=\"thread-report-button\">Report</button><br/><br/>\r\n      </div>\r\n      {isReported ? (<p>Thread has been reported!</p>) : <div></div>}\r\n\r\n      <form className=\"thread-create-reply-form\" onSubmit={createReply}>\r\n        <textarea  onChange={handleReplyText} className=\"thread-textarea\" placeholder=\"Reply to thread...\"></textarea><br/>\r\n        <input className=\"thread-create-reply-password\" type=\"password\" placeholder=\"Enter a password...\" onChange={handleReplyPassword}/>\r\n        <button className=\"thread-create-reply-submit\" type=\"submit\">Submit</button>\r\n      </form>\r\n\r\n      <p>Replies ({replyCount})</p>\r\n      {\r\n        replies.map(reply => (\r\n          <Reply \r\n            key={reply._id}\r\n            text={reply.text}\r\n            thread_id={props._id}\r\n            reply_id={reply._id}\r\n            createdOn={reply.created_on}\r\n            replyCountAdjust={handleDeleteCount}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Thread;\r\n","import React, {useState, useEffect } from 'react'\r\nimport Thread from './Thread';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nconst Board = () => {\r\n  const [threadList, setThreadList] = useState([]);\r\n  const [threadCount, setThreadCount] = useState(0);\r\n  const [isDeleted, setifThreadDeleted] = useState(false);\r\n  const [threadCreated, setifThreadCreated] = useState(false);\r\n  const [newThreadText, setNewThreadText] = useState(\"\");\r\n  const [newThreadPassword, setNewThreadPassword] = useState(\"\");\r\n  const {board} = useParams();\r\n\r\n  function adjustThreadCount(request) {\r\n    if(request === \"DELETE\") {\r\n      setThreadCount(threadCount-1);\r\n      setifThreadDeleted(true);\r\n    }\r\n    if(request === \"CREATE\") {\r\n      setThreadCount(threadCount+1);\r\n    }\r\n  }\r\n\r\n  async function createThread(e) {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    const serverURL = \"\";\r\n    const request = serverURL + \"/api/threads/\" + board;\r\n    const res = await fetch(request, {\r\n      method : \"POST\",\r\n      headers : {\"Content-Type\" : \"application/json\"},\r\n      body : JSON.stringify({\r\n        text : newThreadText,\r\n        delete_password : newThreadPassword,\r\n      })\r\n    })\r\n    const status = await res.text();\r\n    \r\n    if(status === 'success') {\r\n      adjustThreadCount(\"CREATE\");\r\n      setifThreadCreated(true);\r\n    }\r\n\r\n  }\r\n\r\n  function handleNewThreadText(e) {\r\n    setNewThreadText(e.target.value);\r\n  }\r\n\r\n  function handleNewThreadPassword(e) {\r\n    setNewThreadPassword(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchThreads() {\r\n      const serverURL = \"\";\r\n      const boardURL = serverURL + '/api/threads/' + board;\r\n      const res = await fetch(boardURL)\r\n      const data = await res.json()\r\n  \r\n      const threads = [];\r\n      data.forEach(obj => threads.push(obj));\r\n      setThreadList(threads);\r\n      setThreadCount(threads.length);\r\n    }\r\n\r\n    fetchThreads(); \r\n  }, [threadCount, board]);\r\n\r\n  return (\r\n    <div className=\"board\"> \r\n      <h1>{\"/\" + board}</h1>\r\n      {isDeleted ? (<p>Thread has been deleted.</p>) : (<div></div>)}\r\n      {threadCreated ? (<p>Thread has been created.</p>) : (<div></div>)}\r\n      <form onSubmit={createThread}>\r\n        <textarea onChange={handleNewThreadText} className=\"board-textarea\" placeholder=\"Create a thread...\"></textarea><br/>\r\n        <input onChange={handleNewThreadPassword} type=\"password\" placeholder=\"Enter a password...\"></input>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      { //Render threads in the board\r\n        threadList.map(thread => (\r\n          <Thread\r\n            board={board}\r\n            text={thread.text}\r\n            _id={thread._id}\r\n            createdOn={thread.created_on}\r\n            bumpedOn={thread.bumped_on}\r\n            key={thread._id}\r\n            threadCountAdjust={adjustThreadCount}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [boardQuery, setBoardQuery] = useState(\"\");\r\n  const [boardList, setBoardList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchBoards() {\r\n      const serverURL = \"/api/boards\";\r\n      const res = await fetch(serverURL);\r\n      const data = await res.json();\r\n      const list = [];\r\n      data.forEach(board => list.push(board));\r\n      setBoardList(list);\r\n    }\r\n\r\n    fetchBoards();\r\n  }, [])\r\n\r\n  function handleBoardQuery(e) {\r\n    setBoardQuery(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\">\r\n        <Redirect to=\"/main\" />\r\n      </Route>\r\n      <div class=\"App-container\">\r\n        <div className=\"board-list-container\">\r\n          <h1 className=\"title\">Anonymous Message Board</h1>\r\n          <h2 className=\"board-list-title\">Boards</h2>\r\n          <form className=\"board-query-form\">\r\n            <input type=\"text\" placeholder=\"Type board name...\" onChange={handleBoardQuery} />\r\n            <Link to={\"/\" + boardQuery}><button type=\"submit\">Go</button></Link>\r\n          </form>\r\n          <ul className=\"board-list\">\r\n            {\r\n              boardList.map(board =>(\r\n                <li key={board}>\r\n                  <span><Link to={\"/\" + board}>{board}</Link></span>\r\n                </li>)\r\n              )\r\n            }\r\n          </ul>\r\n          <div className=\"copyright\">Copyright 2020 Sovanarung Seng. All Right Reserved.</div>\r\n        </div>\r\n        <Switch>\r\n          <Route path=\"/:board\" children={<Board />} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}